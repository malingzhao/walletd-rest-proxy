// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: qrl.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PublicAPI_GetNodeState_FullMethodName                  = "/qrl.PublicAPI/GetNodeState"
	PublicAPI_GetKnownPeers_FullMethodName                 = "/qrl.PublicAPI/GetKnownPeers"
	PublicAPI_GetPeersStat_FullMethodName                  = "/qrl.PublicAPI/GetPeersStat"
	PublicAPI_GetStats_FullMethodName                      = "/qrl.PublicAPI/GetStats"
	PublicAPI_GetAddressState_FullMethodName               = "/qrl.PublicAPI/GetAddressState"
	PublicAPI_GetOptimizedAddressState_FullMethodName      = "/qrl.PublicAPI/GetOptimizedAddressState"
	PublicAPI_GetMultiSigAddressState_FullMethodName       = "/qrl.PublicAPI/GetMultiSigAddressState"
	PublicAPI_IsSlave_FullMethodName                       = "/qrl.PublicAPI/IsSlave"
	PublicAPI_GetObject_FullMethodName                     = "/qrl.PublicAPI/GetObject"
	PublicAPI_GetLatestData_FullMethodName                 = "/qrl.PublicAPI/GetLatestData"
	PublicAPI_PushTransaction_FullMethodName               = "/qrl.PublicAPI/PushTransaction"
	PublicAPI_TransferCoins_FullMethodName                 = "/qrl.PublicAPI/TransferCoins"
	PublicAPI_ParseAddress_FullMethodName                  = "/qrl.PublicAPI/ParseAddress"
	PublicAPI_GetChainStats_FullMethodName                 = "/qrl.PublicAPI/GetChainStats"
	PublicAPI_GetAddressFromPK_FullMethodName              = "/qrl.PublicAPI/GetAddressFromPK"
	PublicAPI_GetMultiSigCreateTxn_FullMethodName          = "/qrl.PublicAPI/GetMultiSigCreateTxn"
	PublicAPI_GetMultiSigSpendTxn_FullMethodName           = "/qrl.PublicAPI/GetMultiSigSpendTxn"
	PublicAPI_GetMultiSigVoteTxn_FullMethodName            = "/qrl.PublicAPI/GetMultiSigVoteTxn"
	PublicAPI_GetMessageTxn_FullMethodName                 = "/qrl.PublicAPI/GetMessageTxn"
	PublicAPI_GetTokenTxn_FullMethodName                   = "/qrl.PublicAPI/GetTokenTxn"
	PublicAPI_GetTransferTokenTxn_FullMethodName           = "/qrl.PublicAPI/GetTransferTokenTxn"
	PublicAPI_GetSlaveTxn_FullMethodName                   = "/qrl.PublicAPI/GetSlaveTxn"
	PublicAPI_GetLatticeTxn_FullMethodName                 = "/qrl.PublicAPI/GetLatticeTxn"
	PublicAPI_GetTransaction_FullMethodName                = "/qrl.PublicAPI/GetTransaction"
	PublicAPI_GetMiniTransactionsByAddress_FullMethodName  = "/qrl.PublicAPI/GetMiniTransactionsByAddress"
	PublicAPI_GetTransactionsByAddress_FullMethodName      = "/qrl.PublicAPI/GetTransactionsByAddress"
	PublicAPI_GetTokensByAddress_FullMethodName            = "/qrl.PublicAPI/GetTokensByAddress"
	PublicAPI_GetSlavesByAddress_FullMethodName            = "/qrl.PublicAPI/GetSlavesByAddress"
	PublicAPI_GetLatticePKsByAddress_FullMethodName        = "/qrl.PublicAPI/GetLatticePKsByAddress"
	PublicAPI_GetMultiSigAddressesByAddress_FullMethodName = "/qrl.PublicAPI/GetMultiSigAddressesByAddress"
	PublicAPI_GetMultiSigSpendTxsByAddress_FullMethodName  = "/qrl.PublicAPI/GetMultiSigSpendTxsByAddress"
	PublicAPI_GetVoteStats_FullMethodName                  = "/qrl.PublicAPI/GetVoteStats"
	PublicAPI_GetInboxMessagesByAddress_FullMethodName     = "/qrl.PublicAPI/GetInboxMessagesByAddress"
	PublicAPI_GetBalance_FullMethodName                    = "/qrl.PublicAPI/GetBalance"
	PublicAPI_GetTotalBalance_FullMethodName               = "/qrl.PublicAPI/GetTotalBalance"
	PublicAPI_GetOTS_FullMethodName                        = "/qrl.PublicAPI/GetOTS"
	PublicAPI_GetHeight_FullMethodName                     = "/qrl.PublicAPI/GetHeight"
	PublicAPI_GetBlock_FullMethodName                      = "/qrl.PublicAPI/GetBlock"
	PublicAPI_GetBlockByNumber_FullMethodName              = "/qrl.PublicAPI/GetBlockByNumber"
)

// PublicAPIClient is the client API for PublicAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service describes the Public API used by clients (wallet/cli/etc)
type PublicAPIClient interface {
	GetNodeState(ctx context.Context, in *GetNodeStateReq, opts ...grpc.CallOption) (*GetNodeStateResp, error)
	GetKnownPeers(ctx context.Context, in *GetKnownPeersReq, opts ...grpc.CallOption) (*GetKnownPeersResp, error)
	GetPeersStat(ctx context.Context, in *GetPeersStatReq, opts ...grpc.CallOption) (*GetPeersStatResp, error)
	GetStats(ctx context.Context, in *GetStatsReq, opts ...grpc.CallOption) (*GetStatsResp, error)
	GetAddressState(ctx context.Context, in *GetAddressStateReq, opts ...grpc.CallOption) (*GetAddressStateResp, error)
	GetOptimizedAddressState(ctx context.Context, in *GetAddressStateReq, opts ...grpc.CallOption) (*GetOptimizedAddressStateResp, error)
	GetMultiSigAddressState(ctx context.Context, in *GetMultiSigAddressStateReq, opts ...grpc.CallOption) (*GetMultiSigAddressStateResp, error)
	IsSlave(ctx context.Context, in *IsSlaveReq, opts ...grpc.CallOption) (*IsSlaveResp, error)
	GetObject(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectResp, error)
	GetLatestData(ctx context.Context, in *GetLatestDataReq, opts ...grpc.CallOption) (*GetLatestDataResp, error)
	PushTransaction(ctx context.Context, in *PushTransactionReq, opts ...grpc.CallOption) (*PushTransactionResp, error)
	TransferCoins(ctx context.Context, in *TransferCoinsReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	ParseAddress(ctx context.Context, in *ParseAddressReq, opts ...grpc.CallOption) (*ParseAddressResp, error)
	GetChainStats(ctx context.Context, in *GetChainStatsReq, opts ...grpc.CallOption) (*GetChainStatsResp, error)
	GetAddressFromPK(ctx context.Context, in *GetAddressFromPKReq, opts ...grpc.CallOption) (*GetAddressFromPKResp, error)
	GetMultiSigCreateTxn(ctx context.Context, in *MultiSigCreateTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetMultiSigSpendTxn(ctx context.Context, in *MultiSigSpendTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetMultiSigVoteTxn(ctx context.Context, in *MultiSigVoteTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetMessageTxn(ctx context.Context, in *MessageTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetTokenTxn(ctx context.Context, in *TokenTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetTransferTokenTxn(ctx context.Context, in *TransferTokenTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetSlaveTxn(ctx context.Context, in *SlaveTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetLatticeTxn(ctx context.Context, in *LatticeTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error)
	GetTransaction(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error)
	GetMiniTransactionsByAddress(ctx context.Context, in *GetMiniTransactionsByAddressReq, opts ...grpc.CallOption) (*GetMiniTransactionsByAddressResp, error)
	GetTransactionsByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetTransactionsByAddressResp, error)
	GetTokensByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetTokensByAddressResp, error)
	GetSlavesByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetSlavesByAddressResp, error)
	GetLatticePKsByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetLatticePKsByAddressResp, error)
	GetMultiSigAddressesByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetMultiSigAddressesByAddressResp, error)
	GetMultiSigSpendTxsByAddress(ctx context.Context, in *GetMultiSigSpendTxsByAddressReq, opts ...grpc.CallOption) (*GetMultiSigSpendTxsByAddressResp, error)
	GetVoteStats(ctx context.Context, in *GetVoteStatsReq, opts ...grpc.CallOption) (*GetVoteStatsResp, error)
	GetInboxMessagesByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetInboxMessagesByAddressResp, error)
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
	GetTotalBalance(ctx context.Context, in *GetTotalBalanceReq, opts ...grpc.CallOption) (*GetTotalBalanceResp, error)
	GetOTS(ctx context.Context, in *GetOTSReq, opts ...grpc.CallOption) (*GetOTSResp, error)
	GetHeight(ctx context.Context, in *GetHeightReq, opts ...grpc.CallOption) (*GetHeightResp, error)
	GetBlock(ctx context.Context, in *GetBlockReq, opts ...grpc.CallOption) (*GetBlockResp, error)
	GetBlockByNumber(ctx context.Context, in *GetBlockByNumberReq, opts ...grpc.CallOption) (*GetBlockByNumberResp, error)
}

type publicAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicAPIClient(cc grpc.ClientConnInterface) PublicAPIClient {
	return &publicAPIClient{cc}
}

func (c *publicAPIClient) GetNodeState(ctx context.Context, in *GetNodeStateReq, opts ...grpc.CallOption) (*GetNodeStateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeStateResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetNodeState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetKnownPeers(ctx context.Context, in *GetKnownPeersReq, opts ...grpc.CallOption) (*GetKnownPeersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnownPeersResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetKnownPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetPeersStat(ctx context.Context, in *GetPeersStatReq, opts ...grpc.CallOption) (*GetPeersStatResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeersStatResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetPeersStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetStats(ctx context.Context, in *GetStatsReq, opts ...grpc.CallOption) (*GetStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetAddressState(ctx context.Context, in *GetAddressStateReq, opts ...grpc.CallOption) (*GetAddressStateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressStateResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetAddressState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetOptimizedAddressState(ctx context.Context, in *GetAddressStateReq, opts ...grpc.CallOption) (*GetOptimizedAddressStateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOptimizedAddressStateResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetOptimizedAddressState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMultiSigAddressState(ctx context.Context, in *GetMultiSigAddressStateReq, opts ...grpc.CallOption) (*GetMultiSigAddressStateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMultiSigAddressStateResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetMultiSigAddressState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) IsSlave(ctx context.Context, in *IsSlaveReq, opts ...grpc.CallOption) (*IsSlaveResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsSlaveResp)
	err := c.cc.Invoke(ctx, PublicAPI_IsSlave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetObject(ctx context.Context, in *GetObjectReq, opts ...grpc.CallOption) (*GetObjectResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetLatestData(ctx context.Context, in *GetLatestDataReq, opts ...grpc.CallOption) (*GetLatestDataResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestDataResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetLatestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PushTransaction(ctx context.Context, in *PushTransactionReq, opts ...grpc.CallOption) (*PushTransactionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushTransactionResp)
	err := c.cc.Invoke(ctx, PublicAPI_PushTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) TransferCoins(ctx context.Context, in *TransferCoinsReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_TransferCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ParseAddress(ctx context.Context, in *ParseAddressReq, opts ...grpc.CallOption) (*ParseAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_ParseAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetChainStats(ctx context.Context, in *GetChainStatsReq, opts ...grpc.CallOption) (*GetChainStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChainStatsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetChainStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetAddressFromPK(ctx context.Context, in *GetAddressFromPKReq, opts ...grpc.CallOption) (*GetAddressFromPKResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressFromPKResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetAddressFromPK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMultiSigCreateTxn(ctx context.Context, in *MultiSigCreateTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetMultiSigCreateTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMultiSigSpendTxn(ctx context.Context, in *MultiSigSpendTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetMultiSigSpendTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMultiSigVoteTxn(ctx context.Context, in *MultiSigVoteTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetMultiSigVoteTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMessageTxn(ctx context.Context, in *MessageTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetMessageTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTokenTxn(ctx context.Context, in *TokenTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetTokenTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTransferTokenTxn(ctx context.Context, in *TransferTokenTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetTransferTokenTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetSlaveTxn(ctx context.Context, in *SlaveTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetSlaveTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetLatticeTxn(ctx context.Context, in *LatticeTxnReq, opts ...grpc.CallOption) (*TransferCoinsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferCoinsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetLatticeTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTransaction(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMiniTransactionsByAddress(ctx context.Context, in *GetMiniTransactionsByAddressReq, opts ...grpc.CallOption) (*GetMiniTransactionsByAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMiniTransactionsByAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetMiniTransactionsByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTransactionsByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetTransactionsByAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsByAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetTransactionsByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTokensByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetTokensByAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokensByAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetTokensByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetSlavesByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetSlavesByAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSlavesByAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetSlavesByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetLatticePKsByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetLatticePKsByAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatticePKsByAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetLatticePKsByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMultiSigAddressesByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetMultiSigAddressesByAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMultiSigAddressesByAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetMultiSigAddressesByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetMultiSigSpendTxsByAddress(ctx context.Context, in *GetMultiSigSpendTxsByAddressReq, opts ...grpc.CallOption) (*GetMultiSigSpendTxsByAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMultiSigSpendTxsByAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetMultiSigSpendTxsByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetVoteStats(ctx context.Context, in *GetVoteStatsReq, opts ...grpc.CallOption) (*GetVoteStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVoteStatsResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetVoteStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetInboxMessagesByAddress(ctx context.Context, in *GetTransactionsByAddressReq, opts ...grpc.CallOption) (*GetInboxMessagesByAddressResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInboxMessagesByAddressResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetInboxMessagesByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTotalBalance(ctx context.Context, in *GetTotalBalanceReq, opts ...grpc.CallOption) (*GetTotalBalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalBalanceResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetTotalBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetOTS(ctx context.Context, in *GetOTSReq, opts ...grpc.CallOption) (*GetOTSResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOTSResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetOTS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetHeight(ctx context.Context, in *GetHeightReq, opts ...grpc.CallOption) (*GetHeightResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHeightResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetBlock(ctx context.Context, in *GetBlockReq, opts ...grpc.CallOption) (*GetBlockResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetBlockByNumber(ctx context.Context, in *GetBlockByNumberReq, opts ...grpc.CallOption) (*GetBlockByNumberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockByNumberResp)
	err := c.cc.Invoke(ctx, PublicAPI_GetBlockByNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicAPIServer is the server API for PublicAPI service.
// All implementations must embed UnimplementedPublicAPIServer
// for forward compatibility.
//
// This service describes the Public API used by clients (wallet/cli/etc)
type PublicAPIServer interface {
	GetNodeState(context.Context, *GetNodeStateReq) (*GetNodeStateResp, error)
	GetKnownPeers(context.Context, *GetKnownPeersReq) (*GetKnownPeersResp, error)
	GetPeersStat(context.Context, *GetPeersStatReq) (*GetPeersStatResp, error)
	GetStats(context.Context, *GetStatsReq) (*GetStatsResp, error)
	GetAddressState(context.Context, *GetAddressStateReq) (*GetAddressStateResp, error)
	GetOptimizedAddressState(context.Context, *GetAddressStateReq) (*GetOptimizedAddressStateResp, error)
	GetMultiSigAddressState(context.Context, *GetMultiSigAddressStateReq) (*GetMultiSigAddressStateResp, error)
	IsSlave(context.Context, *IsSlaveReq) (*IsSlaveResp, error)
	GetObject(context.Context, *GetObjectReq) (*GetObjectResp, error)
	GetLatestData(context.Context, *GetLatestDataReq) (*GetLatestDataResp, error)
	PushTransaction(context.Context, *PushTransactionReq) (*PushTransactionResp, error)
	TransferCoins(context.Context, *TransferCoinsReq) (*TransferCoinsResp, error)
	ParseAddress(context.Context, *ParseAddressReq) (*ParseAddressResp, error)
	GetChainStats(context.Context, *GetChainStatsReq) (*GetChainStatsResp, error)
	GetAddressFromPK(context.Context, *GetAddressFromPKReq) (*GetAddressFromPKResp, error)
	GetMultiSigCreateTxn(context.Context, *MultiSigCreateTxnReq) (*TransferCoinsResp, error)
	GetMultiSigSpendTxn(context.Context, *MultiSigSpendTxnReq) (*TransferCoinsResp, error)
	GetMultiSigVoteTxn(context.Context, *MultiSigVoteTxnReq) (*TransferCoinsResp, error)
	GetMessageTxn(context.Context, *MessageTxnReq) (*TransferCoinsResp, error)
	GetTokenTxn(context.Context, *TokenTxnReq) (*TransferCoinsResp, error)
	GetTransferTokenTxn(context.Context, *TransferTokenTxnReq) (*TransferCoinsResp, error)
	GetSlaveTxn(context.Context, *SlaveTxnReq) (*TransferCoinsResp, error)
	GetLatticeTxn(context.Context, *LatticeTxnReq) (*TransferCoinsResp, error)
	GetTransaction(context.Context, *GetTransactionReq) (*GetTransactionResp, error)
	GetMiniTransactionsByAddress(context.Context, *GetMiniTransactionsByAddressReq) (*GetMiniTransactionsByAddressResp, error)
	GetTransactionsByAddress(context.Context, *GetTransactionsByAddressReq) (*GetTransactionsByAddressResp, error)
	GetTokensByAddress(context.Context, *GetTransactionsByAddressReq) (*GetTokensByAddressResp, error)
	GetSlavesByAddress(context.Context, *GetTransactionsByAddressReq) (*GetSlavesByAddressResp, error)
	GetLatticePKsByAddress(context.Context, *GetTransactionsByAddressReq) (*GetLatticePKsByAddressResp, error)
	GetMultiSigAddressesByAddress(context.Context, *GetTransactionsByAddressReq) (*GetMultiSigAddressesByAddressResp, error)
	GetMultiSigSpendTxsByAddress(context.Context, *GetMultiSigSpendTxsByAddressReq) (*GetMultiSigSpendTxsByAddressResp, error)
	GetVoteStats(context.Context, *GetVoteStatsReq) (*GetVoteStatsResp, error)
	GetInboxMessagesByAddress(context.Context, *GetTransactionsByAddressReq) (*GetInboxMessagesByAddressResp, error)
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error)
	GetTotalBalance(context.Context, *GetTotalBalanceReq) (*GetTotalBalanceResp, error)
	GetOTS(context.Context, *GetOTSReq) (*GetOTSResp, error)
	GetHeight(context.Context, *GetHeightReq) (*GetHeightResp, error)
	GetBlock(context.Context, *GetBlockReq) (*GetBlockResp, error)
	GetBlockByNumber(context.Context, *GetBlockByNumberReq) (*GetBlockByNumberResp, error)
	mustEmbedUnimplementedPublicAPIServer()
}

// UnimplementedPublicAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicAPIServer struct{}

func (UnimplementedPublicAPIServer) GetNodeState(context.Context, *GetNodeStateReq) (*GetNodeStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeState not implemented")
}
func (UnimplementedPublicAPIServer) GetKnownPeers(context.Context, *GetKnownPeersReq) (*GetKnownPeersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnownPeers not implemented")
}
func (UnimplementedPublicAPIServer) GetPeersStat(context.Context, *GetPeersStatReq) (*GetPeersStatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeersStat not implemented")
}
func (UnimplementedPublicAPIServer) GetStats(context.Context, *GetStatsReq) (*GetStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedPublicAPIServer) GetAddressState(context.Context, *GetAddressStateReq) (*GetAddressStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressState not implemented")
}
func (UnimplementedPublicAPIServer) GetOptimizedAddressState(context.Context, *GetAddressStateReq) (*GetOptimizedAddressStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptimizedAddressState not implemented")
}
func (UnimplementedPublicAPIServer) GetMultiSigAddressState(context.Context, *GetMultiSigAddressStateReq) (*GetMultiSigAddressStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiSigAddressState not implemented")
}
func (UnimplementedPublicAPIServer) IsSlave(context.Context, *IsSlaveReq) (*IsSlaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSlave not implemented")
}
func (UnimplementedPublicAPIServer) GetObject(context.Context, *GetObjectReq) (*GetObjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedPublicAPIServer) GetLatestData(context.Context, *GetLatestDataReq) (*GetLatestDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestData not implemented")
}
func (UnimplementedPublicAPIServer) PushTransaction(context.Context, *PushTransactionReq) (*PushTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTransaction not implemented")
}
func (UnimplementedPublicAPIServer) TransferCoins(context.Context, *TransferCoinsReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCoins not implemented")
}
func (UnimplementedPublicAPIServer) ParseAddress(context.Context, *ParseAddressReq) (*ParseAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetChainStats(context.Context, *GetChainStatsReq) (*GetChainStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainStats not implemented")
}
func (UnimplementedPublicAPIServer) GetAddressFromPK(context.Context, *GetAddressFromPKReq) (*GetAddressFromPKResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressFromPK not implemented")
}
func (UnimplementedPublicAPIServer) GetMultiSigCreateTxn(context.Context, *MultiSigCreateTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiSigCreateTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetMultiSigSpendTxn(context.Context, *MultiSigSpendTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiSigSpendTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetMultiSigVoteTxn(context.Context, *MultiSigVoteTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiSigVoteTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetMessageTxn(context.Context, *MessageTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetTokenTxn(context.Context, *TokenTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetTransferTokenTxn(context.Context, *TransferTokenTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferTokenTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetSlaveTxn(context.Context, *SlaveTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlaveTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetLatticeTxn(context.Context, *LatticeTxnReq) (*TransferCoinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatticeTxn not implemented")
}
func (UnimplementedPublicAPIServer) GetTransaction(context.Context, *GetTransactionReq) (*GetTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedPublicAPIServer) GetMiniTransactionsByAddress(context.Context, *GetMiniTransactionsByAddressReq) (*GetMiniTransactionsByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiniTransactionsByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetTransactionsByAddress(context.Context, *GetTransactionsByAddressReq) (*GetTransactionsByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetTokensByAddress(context.Context, *GetTransactionsByAddressReq) (*GetTokensByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokensByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetSlavesByAddress(context.Context, *GetTransactionsByAddressReq) (*GetSlavesByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlavesByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetLatticePKsByAddress(context.Context, *GetTransactionsByAddressReq) (*GetLatticePKsByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatticePKsByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetMultiSigAddressesByAddress(context.Context, *GetTransactionsByAddressReq) (*GetMultiSigAddressesByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiSigAddressesByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetMultiSigSpendTxsByAddress(context.Context, *GetMultiSigSpendTxsByAddressReq) (*GetMultiSigSpendTxsByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiSigSpendTxsByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetVoteStats(context.Context, *GetVoteStatsReq) (*GetVoteStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteStats not implemented")
}
func (UnimplementedPublicAPIServer) GetInboxMessagesByAddress(context.Context, *GetTransactionsByAddressReq) (*GetInboxMessagesByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboxMessagesByAddress not implemented")
}
func (UnimplementedPublicAPIServer) GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPublicAPIServer) GetTotalBalance(context.Context, *GetTotalBalanceReq) (*GetTotalBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalance not implemented")
}
func (UnimplementedPublicAPIServer) GetOTS(context.Context, *GetOTSReq) (*GetOTSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTS not implemented")
}
func (UnimplementedPublicAPIServer) GetHeight(context.Context, *GetHeightReq) (*GetHeightResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeight not implemented")
}
func (UnimplementedPublicAPIServer) GetBlock(context.Context, *GetBlockReq) (*GetBlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedPublicAPIServer) GetBlockByNumber(context.Context, *GetBlockByNumberReq) (*GetBlockByNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (UnimplementedPublicAPIServer) mustEmbedUnimplementedPublicAPIServer() {}
func (UnimplementedPublicAPIServer) testEmbeddedByValue()                   {}

// UnsafePublicAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicAPIServer will
// result in compilation errors.
type UnsafePublicAPIServer interface {
	mustEmbedUnimplementedPublicAPIServer()
}

func RegisterPublicAPIServer(s grpc.ServiceRegistrar, srv PublicAPIServer) {
	// If the following call pancis, it indicates UnimplementedPublicAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicAPI_ServiceDesc, srv)
}

func _PublicAPI_GetNodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetNodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetNodeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetNodeState(ctx, req.(*GetNodeStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetKnownPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnownPeersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetKnownPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetKnownPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetKnownPeers(ctx, req.(*GetKnownPeersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetPeersStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetPeersStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetPeersStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetPeersStat(ctx, req.(*GetPeersStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetStats(ctx, req.(*GetStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetAddressState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetAddressState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetAddressState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetAddressState(ctx, req.(*GetAddressStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetOptimizedAddressState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetOptimizedAddressState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetOptimizedAddressState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetOptimizedAddressState(ctx, req.(*GetAddressStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMultiSigAddressState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiSigAddressStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMultiSigAddressState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetMultiSigAddressState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMultiSigAddressState(ctx, req.(*GetMultiSigAddressStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_IsSlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).IsSlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_IsSlave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).IsSlave(ctx, req.(*IsSlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetObject(ctx, req.(*GetObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetLatestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetLatestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetLatestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetLatestData(ctx, req.(*GetLatestDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PushTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PushTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_PushTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PushTransaction(ctx, req.(*PushTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_TransferCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCoinsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).TransferCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_TransferCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).TransferCoins(ctx, req.(*TransferCoinsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ParseAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ParseAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_ParseAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ParseAddress(ctx, req.(*ParseAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetChainStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetChainStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetChainStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetChainStats(ctx, req.(*GetChainStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetAddressFromPK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressFromPKReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetAddressFromPK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetAddressFromPK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetAddressFromPK(ctx, req.(*GetAddressFromPKReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMultiSigCreateTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSigCreateTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMultiSigCreateTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetMultiSigCreateTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMultiSigCreateTxn(ctx, req.(*MultiSigCreateTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMultiSigSpendTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSigSpendTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMultiSigSpendTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetMultiSigSpendTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMultiSigSpendTxn(ctx, req.(*MultiSigSpendTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMultiSigVoteTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSigVoteTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMultiSigVoteTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetMultiSigVoteTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMultiSigVoteTxn(ctx, req.(*MultiSigVoteTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMessageTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMessageTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetMessageTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMessageTxn(ctx, req.(*MessageTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTokenTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTokenTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetTokenTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTokenTxn(ctx, req.(*TokenTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTransferTokenTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTokenTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTransferTokenTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetTransferTokenTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTransferTokenTxn(ctx, req.(*TransferTokenTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetSlaveTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlaveTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetSlaveTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetSlaveTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetSlaveTxn(ctx, req.(*SlaveTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetLatticeTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatticeTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetLatticeTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetLatticeTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetLatticeTxn(ctx, req.(*LatticeTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTransaction(ctx, req.(*GetTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMiniTransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiniTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMiniTransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetMiniTransactionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMiniTransactionsByAddress(ctx, req.(*GetMiniTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetTransactionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTransactionsByAddress(ctx, req.(*GetTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTokensByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTokensByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetTokensByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTokensByAddress(ctx, req.(*GetTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetSlavesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetSlavesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetSlavesByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetSlavesByAddress(ctx, req.(*GetTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetLatticePKsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetLatticePKsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetLatticePKsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetLatticePKsByAddress(ctx, req.(*GetTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMultiSigAddressesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMultiSigAddressesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetMultiSigAddressesByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMultiSigAddressesByAddress(ctx, req.(*GetTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetMultiSigSpendTxsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiSigSpendTxsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetMultiSigSpendTxsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetMultiSigSpendTxsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetMultiSigSpendTxsByAddress(ctx, req.(*GetMultiSigSpendTxsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetVoteStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetVoteStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetVoteStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetVoteStats(ctx, req.(*GetVoteStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetInboxMessagesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetInboxMessagesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetInboxMessagesByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetInboxMessagesByAddress(ctx, req.(*GetTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetTotalBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTotalBalance(ctx, req.(*GetTotalBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetOTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetOTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetOTS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetOTS(ctx, req.(*GetOTSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetHeight(ctx, req.(*GetHeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetBlock(ctx, req.(*GetBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetBlockByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetBlockByNumber(ctx, req.(*GetBlockByNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicAPI_ServiceDesc is the grpc.ServiceDesc for PublicAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrl.PublicAPI",
	HandlerType: (*PublicAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeState",
			Handler:    _PublicAPI_GetNodeState_Handler,
		},
		{
			MethodName: "GetKnownPeers",
			Handler:    _PublicAPI_GetKnownPeers_Handler,
		},
		{
			MethodName: "GetPeersStat",
			Handler:    _PublicAPI_GetPeersStat_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _PublicAPI_GetStats_Handler,
		},
		{
			MethodName: "GetAddressState",
			Handler:    _PublicAPI_GetAddressState_Handler,
		},
		{
			MethodName: "GetOptimizedAddressState",
			Handler:    _PublicAPI_GetOptimizedAddressState_Handler,
		},
		{
			MethodName: "GetMultiSigAddressState",
			Handler:    _PublicAPI_GetMultiSigAddressState_Handler,
		},
		{
			MethodName: "IsSlave",
			Handler:    _PublicAPI_IsSlave_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _PublicAPI_GetObject_Handler,
		},
		{
			MethodName: "GetLatestData",
			Handler:    _PublicAPI_GetLatestData_Handler,
		},
		{
			MethodName: "PushTransaction",
			Handler:    _PublicAPI_PushTransaction_Handler,
		},
		{
			MethodName: "TransferCoins",
			Handler:    _PublicAPI_TransferCoins_Handler,
		},
		{
			MethodName: "ParseAddress",
			Handler:    _PublicAPI_ParseAddress_Handler,
		},
		{
			MethodName: "GetChainStats",
			Handler:    _PublicAPI_GetChainStats_Handler,
		},
		{
			MethodName: "GetAddressFromPK",
			Handler:    _PublicAPI_GetAddressFromPK_Handler,
		},
		{
			MethodName: "GetMultiSigCreateTxn",
			Handler:    _PublicAPI_GetMultiSigCreateTxn_Handler,
		},
		{
			MethodName: "GetMultiSigSpendTxn",
			Handler:    _PublicAPI_GetMultiSigSpendTxn_Handler,
		},
		{
			MethodName: "GetMultiSigVoteTxn",
			Handler:    _PublicAPI_GetMultiSigVoteTxn_Handler,
		},
		{
			MethodName: "GetMessageTxn",
			Handler:    _PublicAPI_GetMessageTxn_Handler,
		},
		{
			MethodName: "GetTokenTxn",
			Handler:    _PublicAPI_GetTokenTxn_Handler,
		},
		{
			MethodName: "GetTransferTokenTxn",
			Handler:    _PublicAPI_GetTransferTokenTxn_Handler,
		},
		{
			MethodName: "GetSlaveTxn",
			Handler:    _PublicAPI_GetSlaveTxn_Handler,
		},
		{
			MethodName: "GetLatticeTxn",
			Handler:    _PublicAPI_GetLatticeTxn_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _PublicAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetMiniTransactionsByAddress",
			Handler:    _PublicAPI_GetMiniTransactionsByAddress_Handler,
		},
		{
			MethodName: "GetTransactionsByAddress",
			Handler:    _PublicAPI_GetTransactionsByAddress_Handler,
		},
		{
			MethodName: "GetTokensByAddress",
			Handler:    _PublicAPI_GetTokensByAddress_Handler,
		},
		{
			MethodName: "GetSlavesByAddress",
			Handler:    _PublicAPI_GetSlavesByAddress_Handler,
		},
		{
			MethodName: "GetLatticePKsByAddress",
			Handler:    _PublicAPI_GetLatticePKsByAddress_Handler,
		},
		{
			MethodName: "GetMultiSigAddressesByAddress",
			Handler:    _PublicAPI_GetMultiSigAddressesByAddress_Handler,
		},
		{
			MethodName: "GetMultiSigSpendTxsByAddress",
			Handler:    _PublicAPI_GetMultiSigSpendTxsByAddress_Handler,
		},
		{
			MethodName: "GetVoteStats",
			Handler:    _PublicAPI_GetVoteStats_Handler,
		},
		{
			MethodName: "GetInboxMessagesByAddress",
			Handler:    _PublicAPI_GetInboxMessagesByAddress_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _PublicAPI_GetBalance_Handler,
		},
		{
			MethodName: "GetTotalBalance",
			Handler:    _PublicAPI_GetTotalBalance_Handler,
		},
		{
			MethodName: "GetOTS",
			Handler:    _PublicAPI_GetOTS_Handler,
		},
		{
			MethodName: "GetHeight",
			Handler:    _PublicAPI_GetHeight_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _PublicAPI_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _PublicAPI_GetBlockByNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qrl.proto",
}

// AdminAPIClient is the client API for AdminAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This is a place holder for testing/instrumentation APIs
type AdminAPIClient interface {
}

type adminAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAPIClient(cc grpc.ClientConnInterface) AdminAPIClient {
	return &adminAPIClient{cc}
}

// AdminAPIServer is the server API for AdminAPI service.
// All implementations must embed UnimplementedAdminAPIServer
// for forward compatibility.
//
// This is a place holder for testing/instrumentation APIs
type AdminAPIServer interface {
	mustEmbedUnimplementedAdminAPIServer()
}

// UnimplementedAdminAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminAPIServer struct{}

func (UnimplementedAdminAPIServer) mustEmbedUnimplementedAdminAPIServer() {}
func (UnimplementedAdminAPIServer) testEmbeddedByValue()                  {}

// UnsafeAdminAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAPIServer will
// result in compilation errors.
type UnsafeAdminAPIServer interface {
	mustEmbedUnimplementedAdminAPIServer()
}

func RegisterAdminAPIServer(s grpc.ServiceRegistrar, srv AdminAPIServer) {
	// If the following call pancis, it indicates UnimplementedAdminAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminAPI_ServiceDesc, srv)
}

// AdminAPI_ServiceDesc is the grpc.ServiceDesc for AdminAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrl.AdminAPI",
	HandlerType: (*AdminAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "qrl.proto",
}
